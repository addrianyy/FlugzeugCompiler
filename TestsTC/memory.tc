u32 test_deduplicate(i32* y, i64 c) {
    y[1] = 1;
    i32 cc = y[2];
    y[3] = 3;

    return cc + y[2];
}

void blackbox(i32* x) {
    *(i32*)((i32)x) = 12;
}

u32 test_known_load(i32* y, i64 c) {
    y[1] = 1;
    y[2] += 4;
    y[3] = 3;

    return y[2];
}

u32 test_dead_store(i32* y, i64 c) {
    y[1] = 1;
    y[2] += 4;
    y[3] = 3;
    y[2] = 33;
    y[3] = 123;

    return y[2];
}

i32 test_known_load_global(i32* y, i64 c) {
    y[1] = 33;

    i32 z = 0;
    while (c) {
        z += y[1];
        c -= 1;
    }

    return z;
}

void global_dead_store(i32* x, i32 c, i32 z) {
    x[1] = 3;

    while (c) {
        x[3] -= 1;
        c -= 1;
    }

    if (z == 3) {
        x[1] = 123;
    } else {
        x[1] = 188;
    }
    x[1] = 33;
}

extern void print_num(i32 x);

void fill_buffer(i32* result, i32 n) {
    result[0] = 1;

    for (i32 i = 1; i < n; i += 1) {
        result[i] = result[i - 1] * i;
    }

    i32 sum = 0;
    for (i32 i = 0; i < n; i += 1) {
        sum += result[i];
    }

    for (i32 i = 0; i < n; i += 1) {
        result[i] *= sum;
    }
}

void test() {
    i32 buffer1[5];
    i32 buffer2[6];
    fill_buffer(buffer1, 5);
    fill_buffer(buffer2, 6);

    for (i32 i = 0; i < 5; i += 1) {
        print_num(buffer1[i] + buffer2[i] * i);
    }
}

void simple(i32* ptr, i32 index) {
    ptr[index] += 8;
}